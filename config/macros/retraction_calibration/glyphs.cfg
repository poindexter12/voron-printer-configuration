# Glyph Drawing Macros for Retraction Test
# Single macro to draw any digit using 7-segment display logic

[gcode_macro _DRAW_DIGIT]
description: Draw any digit (0-9) using standard 7-segment display logic
parameters:
  DIGIT: The digit to draw (0-9)
  START_X: Starting X position for the glyph
  START_Y: Starting Y position for the glyph
  WIDTH_EXTRUSION: Pre-calculated extrusion for width lines
  HEIGHT_EXTRUSION: Pre-calculated extrusion for height lines
  PRINT_SPEED: Print speed for drawing (mm/min)
gcode:
    ; Extract values from parameters into Jinja variables
    {% set digit = params.DIGIT | string %}
    {% set start_x = params.START_X | float %}
    {% set start_y = params.START_Y | float %}
    {% set width_extrusion = params.WIDTH_EXTRUSION | float %}
    {% set height_extrusion = params.HEIGHT_EXTRUSION | float %}
    {% set print_speed = params.PRINT_SPEED | float %}
    
    ; Calculate standard glyph coordinates (2mm x 2mm to match original)
    {% set left_edge = start_x %}
    {% set right_edge = start_x + 2 %}
    {% set top_edge = start_y %}
    {% set bottom_edge = start_y + 2 %}
    {% set middle_y = start_y + 1 %}
    
    ; Draw digits as continuous paths to match original G-code exactly
    
    ; Draw each segment conditionally based on which digits need it
    ; 7 segments: each is a single line
    
    ; Segment 0: Top horizontal (left to right)
    {% if digit in ["0", "2", "3", "5", "6", "7", "8", "9"] %}
        G1 X{{ right_edge }} Y{{ top_edge }} E{{ width_extrusion }} F{{ print_speed }}
    {% endif %}
    
    ; Segment 1: Top-right vertical (top to middle)
    {% if digit in ["0", "1", "2", "3", "4", "7", "8", "9"] %}
        G1 X{{ right_edge }} Y{{ top_edge }} E{{ height_extrusion * 0.5 }} F{{ print_speed }}
    {% endif %}
    
    ; Segment 2: Bottom-right vertical (middle to bottom)
    {% if digit in ["0", "1", "3", "4", "5", "6", "7", "8", "9"] %}
        G1 X{{ right_edge }} Y{{ middle_y }} E{{ height_extrusion * 0.5 }} F{{ print_speed }}
    {% endif %}
    
    ; Segment 3: Bottom horizontal (right to left)
    {% if digit in ["0", "2", "3", "5", "6", "8", "9"] %}
        G1 X{{ left_edge }} Y{{ bottom_edge }} E{{ width_extrusion }} F{{ print_speed }}
    {% endif %}
    
    ; Segment 4: Bottom-left vertical (bottom to middle)
    {% if digit in ["0", "2", "6", "8"] %}
        G1 X{{ left_edge }} Y{{ bottom_edge }} E{{ height_extrusion * 0.5 }} F{{ print_speed }}
    {% endif %}
    
    ; Segment 5: Top-left vertical (middle to top)
    {% if digit in ["0", "4", "5", "6", "8", "9"] %}
        G1 X{{ left_edge }} Y{{ middle_y }} E{{ height_extrusion * 0.5 }} F{{ print_speed }}
    {% endif %}
    
    ; Segment 6: Middle horizontal (left to right)
    {% if digit in ["2", "3", "4", "5", "6", "8", "9"] %}
        G1 X{{ right_edge }} Y{{ middle_y }} E{{ width_extrusion }} F{{ print_speed }}
    {% endif %}

[gcode_macro _DRAW_PERIOD]
description: Draw the period (.) glyph
parameters:
  START_X: Starting X position for the glyph
  START_Y: Starting Y position for the glyph
  WIDTH_EXTRUSION: Pre-calculated extrusion for width lines
  HEIGHT_EXTRUSION: Pre-calculated extrusion for height lines
  PRINT_SPEED: Print speed for drawing (mm/min)
gcode:
    ; Extract values from parameters into Jinja variables
    {% set start_x = params.START_X | float %}
    {% set start_y = params.START_Y | float %}
    {% set width_extrusion = params.WIDTH_EXTRUSION | float %}
    {% set print_speed = params.PRINT_SPEED | float %}
    
    ; Draw period - single point with small extrusion
    {% set period_extrusion = width_extrusion * 0.1 %}  ; Much smaller than full width
    G1 X{{ start_x }} Y{{ start_y }} E{{ period_extrusion }} F{{ print_speed }}
