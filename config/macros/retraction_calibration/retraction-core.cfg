# Retraction Test Core Macros
# Phase 1: Core Utility Macros - Fully Parameterized for Immutability

[gcode_macro _EXTRUSION_CALC]
description: Calculate extrusion amount for given distance using the same formula as the original JavaScript
parameters:
  DISTANCE: Distance to move (mm)
  LINE_WIDTH: Line width (mm) 
  LAYER_HEIGHT: Layer height (mm)
  FILAMENT_DIAMETER: Filament diameter (mm)
  EXTRUSION_MULTIPLIER: Extrusion multiplier
gcode:
  {% set PI = 3.141592653589793 %}
  {# Calculate line area using the same formula as the JavaScript #}
  {% set line_area = (LINE_WIDTH - LAYER_HEIGHT) * LAYER_HEIGHT + PI * (LAYER_HEIGHT/2)**2 %}
  {# Calculate filament cross-sectional area #}
  {% set filament_area = PI * (FILAMENT_DIAMETER/2)**2 %}
  {# Calculate extrusion per mm #}
  {% set extrusion_per_mm = (line_area / filament_area) * EXTRUSION_MULTIPLIER %}
  {# Calculate total extrusion for the distance #}
  {% set extrusion_amount = extrusion_per_mm * DISTANCE %}
  {# Return the calculated values through parameters the calling macro to use #}
  {# Note: In Klipper, we need to pass these back through the calling macro #}

[gcode_macro _RETRACT]
description: Retract filament with optional Z-hop
parameters:
  DIRECTION: + for unretract, - for retract
  DISTANCE: Retraction distance (mm)
  SPEED: Retraction speed (mm/s)
  Z_HOP: Z-hop height (mm, 0 to disable)
gcode:
  {% if DIRECTION == "-" %}
    {# Retract filament #}
    G1 E-{DISTANCE} F{SPEED * 60} ; Retract
    {% if Z_HOP > 0 %}
      {# Z-hop up #}
      G1 Z{Z_HOP} F1200 ; Z-hop
    {% endif %}
  {% else %}
    {# Unretract filament #}
    {% if Z_HOP > 0 %}
      {# Return from Z-hop #}
      G1 Z-{Z_HOP} F1200 ; Return from Z-hop
    {% endif %}
    G1 E{DISTANCE} F{SPEED * 60} ; Unretract
  {% endif %}

[gcode_macro _MOVE_TO]
description: Move to coordinates with optional retraction
parameters:
  FROM_X: Starting X coordinate
  FROM_Y: Starting Y coordinate
  TO_X: Target X coordinate
  TO_Y: Target Y coordinate  
  TO_Z: Target Z coordinate (optional)
  RETRACT: Whether to retract (true/false)
  RETRACT_DISTANCE: Retraction distance (mm, default 0.5)
  RETRACT_SPEED: Retraction speed (mm/s, default 35)
  Z_HOP: Z-hop height (mm, default 0.1)
  TRAVEL_SPEED: Travel speed (mm/s)
gcode:
  {% if RETRACT %}
    {# Calculate distance to determine if retraction is needed #}
    {% set distance = ((TO_X - FROM_X)**2 + (TO_Y - FROM_Y)**2)**0.5 %}
    {% if distance > 2 %}
      {# Retract before travel if distance > 2mm #}
      _RETRACT DIRECTION=- DISTANCE={RETRACT_DISTANCE|default(0.5)} SPEED={RETRACT_SPEED|default(35)} Z_HOP={Z_HOP|default(0.1)}
    {% endif %}
  {% endif %}
  {# Move to target position #}
  G0 X{TO_X} Y{TO_Y}{% if TO_Z is defined %} Z{TO_Z}{% endif %} F{TRAVEL_SPEED * 60}
  {% if RETRACT %}
    {% if distance > 2 %}
      {# Unretract after travel #}
      _RETRACT DIRECTION=+ DISTANCE={RETRACT_DISTANCE|default(0.5)} SPEED={RETRACT_SPEED|default(35)} Z_HOP={Z_HOP|default(0.1)}
    {% endif %}
  {% endif %}

[gcode_macro _DRAW_LINE]
description: Draw a single line with proper extrusion calculation
parameters:
  FROM_X: Starting X coordinate
  FROM_Y: Starting Y coordinate
  TO_X: Target X coordinate
  TO_Y: Target Y coordinate
  LINE_WIDTH: Line width (mm)
  LAYER_HEIGHT: Layer height (mm)
  SPEED: Print speed (mm/s)
  FILAMENT_DIAMETER: Filament diameter (mm, default 1.75)
  EXTRUSION_MULTIPLIER: Extrusion multiplier (default 1.0)
gcode:
  {# Calculate distance to move #}
  {% set distance = ((TO_X - FROM_X)**2 + (TO_Y - FROM_Y)**2)**0.5 %}
  {# Calculate extrusion amount inline #}
  {% set PI = 3.141592653589793 %}
  {% set line_area = (LINE_WIDTH - LAYER_HEIGHT) * LAYER_HEIGHT + PI * (LAYER_HEIGHT/2)**2 %}
  {% set filament_area = PI * (FILAMENT_DIAMETER|default(1.75)/2)**2 %}
  {% set extrusion_per_mm = (line_area / filament_area) * (EXTRUSION_MULTIPLIER|default(1.0)) %}
  {% set extrusion_amount = extrusion_per_mm * distance %}
  {# Draw the line with calculated extrusion #}
  G1 X{TO_X} Y{TO_Y} E{extrusion_amount} F{SPEED * 60} ; Draw line

[gcode_macro _DRAW_LINE_WITH_EXTRUSION]
description: Draw a line using pre-calculated extrusion value
parameters:
  FROM_X: Starting X coordinate
  FROM_Y: Starting Y coordinate
  TO_X: Target X coordinate
  TO_Y: Target Y coordinate
  EXTRUSION_AMOUNT: Pre-calculated extrusion amount
  SPEED: Print speed (mm/s)
gcode:
  {# Draw the line with provided extrusion amount #}
  G1 X{TO_X} Y{TO_Y} E{EXTRUSION_AMOUNT} F{SPEED * 60} ; Draw line

[gcode_macro _DRAW_PERIMETER_LAYER]
description: Draw a rectangular perimeter layer with multiple perimeters stepping inward
parameters:
  START_X: Starting X coordinate (bottom-left)
  START_Y: Starting Y coordinate (bottom-left)
  WIDTH: Total width of the perimeter (mm)
  HEIGHT: Total height of the perimeter (mm)
  LINE_WIDTH: Line width (mm)
  LAYER_HEIGHT: Layer height (mm)
  NUM_PERIMETERS: Number of perimeters to draw (default 4)
  STEP_DISTANCE: Distance to step inward for each perimeter (mm, default 0.5)
  SPEED: Print speed (mm/s, default 100)
  FILAMENT_DIAMETER: Filament diameter (mm, default 1.75)
  EXTRUSION_MULTIPLIER: Extrusion multiplier (default 1.0)
gcode:
  {# Draw multiple perimeters stepping inward #}
  {% for i in range(NUM_PERIMETERS|default(4)) %}
    {# Calculate current perimeter dimensions #}
    {% set current_step = i * (STEP_DISTANCE|default(0.5)) %}
    {% set current_x = START_X + current_step %}
    {% set current_y = START_Y + current_step %}
    {% set current_width = WIDTH - (2 * current_step) %}
    {% set current_height = HEIGHT - (2 * current_step) %}
    
    {# Calculate extrusion for each line #}
    {% set PI = 3.141592653589793 %}
    {% set line_area = (LINE_WIDTH - LAYER_HEIGHT) * LAYER_HEIGHT + PI * (LAYER_HEIGHT/2)**2 %}
    {% set filament_area = PI * (FILAMENT_DIAMETER|default(1.75)/2)**2 %}
    {% set extrusion_per_mm = (line_area / filament_area) * (EXTRUSION_MULTIPLIER|default(1.0)) %}
    
    {# Draw perimeter rectangle (up, right, down, left) #}
    {# Up line #}
    {% set up_extrusion = extrusion_per_mm * current_height %}
    G1 X{current_x} Y{current_y + current_height} E{up_extrusion} F{SPEED * 60} ; Draw perimeter (up)
    
    {# Right line #}
    {% set right_extrusion = extrusion_per_mm * current_width %}
    G1 X{current_x + current_width} Y{current_y + current_height} E{right_extrusion} F{SPEED * 60} ; Draw perimeter (right)
    
    {# Down line #}
    {% set down_extrusion = extrusion_per_mm * current_height %}
    G1 X{current_x + current_width} Y{current_y} E{down_extrusion} F{SPEED * 60} ; Draw perimeter (down)
    
    {# Left line #}
    {% set left_extrusion = extrusion_per_mm * current_width %}
    G1 X{current_x} Y{current_y} E{left_extrusion} F{SPEED * 60} ; Draw perimeter (left)
    
    {# Step inward for next perimeter (unless this is the last one) #}
    {% if i < (NUM_PERIMETERS|default(4)) - 1 %}
      G0 X{current_x + (STEP_DISTANCE|default(0.5))} Y{current_y + (STEP_DISTANCE|default(0.5))} F7200 ; Step inwards to print next perimeter
    {% endif %}
  {% endfor %}

[gcode_macro _CALCULATE_EXTRUSION_FOR_DISTANCE]
description: Calculate extrusion amount for a given distance and return as a comment for manual use
parameters:
  DISTANCE: Distance to move (mm)
  LINE_WIDTH: Line width (mm) 
  LAYER_HEIGHT: Layer height (mm)
  FILAMENT_DIAMETER: Filament diameter (mm)
  EXTRUSION_MULTIPLIER: Extrusion multiplier
gcode:
  {% set PI = 3.141592653589793 %}
  {# Calculate line area using the same formula as the JavaScript #}
  {% set line_area = (LINE_WIDTH - LAYER_HEIGHT) * LAYER_HEIGHT + PI * (LAYER_HEIGHT/2)**2 %}
  {# Calculate filament cross-sectional area #}
  {% set filament_area = PI * (FILAMENT_DIAMETER/2)**2 %}
  {# Calculate extrusion per mm #}
  {% set extrusion_per_mm = (line_area / filament_area) * EXTRUSION_MULTIPLIER %}
  {# Calculate total extrusion for the distance #}
  {% set extrusion_amount = extrusion_per_mm * DISTANCE %}
  {# Output the calculation as a comment for manual use #}
  ; Extrusion calculation for {DISTANCE}mm:
  ; Line area: {line_area} mm²
  ; Filament area: {filament_area} mm²  
  ; Extrusion per mm: {extrusion_per_mm} mm/mm
  ; Total extrusion: {extrusion_amount} mm
  ; Use E{extrusion_amount} in your G1 command



