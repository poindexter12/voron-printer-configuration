[gcode_macro _CALIBRATION_BLOCK]
description: Internal helper that prints one full calibration block (hidden)
gcode:
    # _CALIBRATION_BLOCK — prints an entire calibration block
    # A calibration block consists of N physical layers. The first layer is a
    # marker layer (adds corner ticks), remaining layers are calibration layers.
    #
    # Parameters (passed by the invoker):
    #   RETRACTION_DISTANCE       : base retraction length for this block (mm)
    #   RETRACTION_SPEED_MMS      : retraction speed for this block (mm/s)
    #   NOZZLE_TEMPERATURE        : nozzle temperature to set at start of block (°C)
    #   FAN_SPEED_PERCENT         : fan speed percent for this block (0-100)
    #   LAYERS_PER_CALIBRATION_BLOCK : number of physical layers in this block (default 25)
    #
    # Optional (sensible defaults, can be overridden by invoker):
    #   RETRACTION_DISTANCE_INCREMENT : per-layer increment added to RETRACTION_DISTANCE (mm, default 0)
    #   LAYER_HEIGHT_MM           : layer height in mm (default 0.2)
    #   STARTING_Z_HEIGHT         : starting Z for this block; defaults to current Z
    #
    {% set retraction_distance              = params.RETRACTION_DISTANCE|default(0.5)|float %}
    {% set retraction_speed_mms             = params.RETRACTION_SPEED_MMS|default(10)|float %}          # mm/s
    {% set nozzle_temperature               = params.NOZZLE_TEMPERATURE|default(210)|float %}
    {% set fan_speed_percent                = params.FAN_SPEED_PERCENT|default(40)|float %}                 # 0..100
    {% set layers_per_calibration_block     = params.LAYERS_PER_CALIBRATION_BLOCK|default(25)|int %}

    {% set retraction_distance_increment    = params.RETRACTION_DISTANCE_INCREMENT|default(0.0)|float %}
    {% set layer_height_mm                  = params.LAYER_HEIGHT_MM|default(0.2)|float %}
    {% set starting_z_height                = params.STARTING_Z_HEIGHT|default(printer.toolhead.position.z)|float %}

    {% set retraction_feed_rate_mmpm        = (retraction_speed_mms * 60.0) %}                   # mm/min
    {% set fan_speed_pwm                    = (fan_speed_percent/100.0*255) | int %}
    {% set waypoints_per_square            = params.WAYPOINTS_PER_SQUARE|default(4)|int %}
    {% set retraction_distance_waypoint_increment = params.RETRACTION_DISTANCE_WAYPOINT_INCREMENT|default(0.0)|float %}

    {% set print_speed_mm_per_min = (printer.gcode_move.speed) if printer.gcode_move.speed else 2400 %}

    ; --- Apply per-block conditions ---
    M104 S{nozzle_temperature}
    M106 S{fan_speed_pwm}

    ; --- Marker layer (outside loop) ---
    {% set current_retraction_distance = retraction_distance %}
    {% set current_layer_z = starting_z_height %}
    G90
    G1 Z{current_layer_z} F300

    ; ===== Marker layer (corner ticks + normal pattern) =====
    ; TODO: insert the exact corner tick moves below
    ; e.g., small nubs at tower corners for visual separation
    ; --- Corner ticks start ---
    ; <marker-corner-moves-go-here>
    ; --- Corner ticks end ---

    ; Then run the shared calibration pattern (marker layer)
    M83
    ; Shared calibration pattern for marker layer with per-waypoint retraction changes
    ; Base retraction for this layer:
    ;   base_retraction_distance = current_retraction_distance
    ; Each waypoint i in [0..waypoints_per_square-1] uses:
    ;   waypoint_retraction_distance = base_retraction_distance + i * retraction_distance_waypoint_increment

    {% set base_retraction_distance = current_retraction_distance %}
    {% for waypoint_index in range(waypoints_per_square) %}
        {% set waypoint_retraction_distance = base_retraction_distance + (waypoint_index * retraction_distance_waypoint_increment) %}
        ; -- Waypoint {{ waypoint_index+1 }} / {{ waypoints_per_square }} --
        ; TODO: move to next square segment/corner here
        ; e.g., G1 X... Y... F{print_speed_mm_per_min}
        G1 F{retraction_feed_rate_mmpm} E-{waypoint_retraction_distance}
        G1 F{retraction_feed_rate_mmpm} E{waypoint_retraction_distance}
    {% endfor %}

    ; Return to start of square and reset retraction to base (no move needed for E in relative mode)

    ; --- Body layers (loop layer 2 .. N) ---
    {% for layer_index in range(1, layers_per_calibration_block) %}
        {% set current_retraction_distance = retraction_distance + (layer_index * retraction_distance_increment) %}
        {% set current_layer_z = starting_z_height + (layer_index * layer_height_mm) %}

        G90
        G1 Z{current_layer_z} F300

        ; ===== Calibration layer (pattern only) =====
        M83
        ; Shared calibration pattern for body layer with per-waypoint retraction changes
        {% set base_retraction_distance = current_retraction_distance %}
        {% for waypoint_index in range(waypoints_per_square) %}
            {% set waypoint_retraction_distance = base_retraction_distance + (waypoint_index * retraction_distance_waypoint_increment) %}
            ; -- Waypoint {{ waypoint_index+1 }} / {{ waypoints_per_square }} --
            ; TODO: move to next square segment/corner here
            G1 F{retraction_feed_rate_mmpm} E-{waypoint_retraction_distance}
            G1 F{retraction_feed_rate_mmpm} E{waypoint_retraction_distance}
        {% endfor %}
    {% endfor %}
