"""Test suite for comparing G-code files generated by Klipper macros with expected output."""

import os
import re
import shutil
import difflib
from datetime import datetime

import pytest
from jinja2 import Template

# Read retain_count from environment (allow override). Default to 5.
try:
    RETAIN_COUNT = int(os.environ.get('retain_count',
                                     os.environ.get('RETAIN_COUNT', '5')))
except ValueError:
    RETAIN_COUNT = 5

def save_cleaned_files(results_dir, render, render_cleaned, orig, orig_cleaned):
    """Save cleaned rendered and source files to disk."""
    # Ensure rendered output gets .gcode extension since it contains G-code
    render_basename = os.path.basename(render)
    if render_basename.endswith('.cfg'):
        render_basename = render_basename[:-4] + '.gcode'

    render_clean_path = os.path.join(
        results_dir, f'rendered_clean_{render_basename}')
    with open(render_clean_path, 'w', encoding='utf-8') as rc:
        rc.write('\n'.join(render_cleaned) + '\n')

    source_clean_path = os.path.join(
        results_dir, f'source_clean_{os.path.basename(orig)}')
    with open(source_clean_path, 'w', encoding='utf-8') as sc:
        sc.write('\n'.join(render_cleaned) + '\n')


def cleanup_old_runs(results_root, retain_count):
    """Remove oldest test_run* directories so that after creating a new run
    there will be at most retain_count runs."""
    if not os.path.isdir(results_root):
        return
    runs = [d for d in os.listdir(results_root)
            if d.startswith('test_run') and
            os.path.isdir(os.path.join(results_root, d))]
    runs.sort()
    if len(runs) >= retain_count:
        to_keep = max(0, retain_count - 1)
        to_delete = runs[:max(0, len(runs) - to_keep)]
        for d in to_delete:
            try:
                shutil.rmtree(os.path.join(results_root, d))
            except (OSError, PermissionError) as exc:
                print(f"Warning: failed to remove {d}: {exc}")

def klipper_to_jinja(text):
    """Convert Klipper-style {variable} to Jinja2-style {{ variable }}."""
    converted = re.sub(r'(?<!\{)\{([a-zA-Z0-9_]+)\}(?!\})', r'{{ \1 }}', text)
    return converted

def clean_gcode_file(path, render_jinja=False, params=None):
    """Read a file, optionally render as Jinja2 with given parameters,
    and return cleaned lines."""
    if params is None:
        params = {}
    with open(path, 'r', encoding='utf-8') as f:
        content = f.read()
        if render_jinja:
            content = klipper_to_jinja(content)
            content = Template(content).render(params=params)
        lines = content.splitlines()
    cleaned = []
    for line in lines:
        line = line.strip()
        if not line:
            continue
        if line.startswith('[') or line.startswith(';') or line.startswith('#'):
            continue
        if '{%' in line or ':' in line:
            continue
        cleaned.append(line)
    return cleaned


def diff_with_html(original_lines, generated_lines, original_name="original", generated_name="generated"):
    """Use difflib to generate an HTML diff between two sets of lines.

    Args:
        original_lines: List of strings from the original/reference file
        generated_lines: List of strings from the generated file
        original_name: Name to use for the original file in diff output
        generated_name: Name to use for the generated file in diff output

    Returns:
        HTML string with formatted diff
    """
    html_diff = difflib.HtmlDiff()
    return html_diff.make_file(original_lines, generated_lines, original_name, generated_name)


# Test data for different layer types
first_layer_test_data = {
    'orig_file': 'retraction/perimeter_first_layer.gcode',
    'render_file': '../retraction_test/draw_perimeter_layer.cfg',
    'params': {
        'START_X': 132.6417,
        'START_Y': 148.0068,
        'WIDTH': 84.7166,  # Actual width from expected G-code: 217.3583 - 132.6417
        'HEIGHT': 42.4264,  # Actual height from expected G-code: 190.4332 - 148.0068
        'LINE_WIDTH': 0.56,  # 140% of 0.4mm nozzle
        'LAYER_HEIGHT': 0.25,  # First layer height from G-code header
        'NUM_PERIMETERS': 4,
        'STEP_DISTANCE': 0.5063495408493621,  # Actual step distance from expected G-code: 133.148 - 132.6417
        'PRINT_FEEDRATE': 1800,  # 30 mm/s * 60 = 1800 mm/min
        'TRAVEL_FEEDRATE': 7200,  # 120 mm/s * 60 = 7200 mm/min
        'FILAMENT_DIAMETER': 1.7,
        'EXTRUSION_MULTIPLIER': 1.0
    }
}

other_layers_test_data = {
    'orig_file': 'retraction/perimeter_other_layers.gcode',
    'render_file': '../retraction_test/draw_perimeter_layer.cfg',
    'params': {
        'START_X': 132.6417,
        'START_Y': 190.9396,  # Different Y start for subsequent layers
        'WIDTH': 64.2545,  # Actual width from expected G-code: 196.8962 - 132.6417
        'HEIGHT': 11.5063,  # Actual height from expected G-code: 202.4459 - 190.9396
        'LINE_WIDTH': 0.45,  # 112.5% of 0.4mm nozzle
        'LAYER_HEIGHT': 0.2,  # Subsequent layer height from G-code header
        'NUM_PERIMETERS': 4,
        'STEP_DISTANCE': 0.5063495408493621,  # Same step distance
        'PRINT_FEEDRATE': 1800,  # 30 mm/s * 60 = 1800 mm/min (same as first layer for this G-code)
        'TRAVEL_FEEDRATE': 7200,  # 120 mm/s * 60 = 7200 mm/min
        'FILAMENT_DIAMETER': 1.7,
        'EXTRUSION_MULTIPLIER': 1.0
    }
}

@pytest.fixture(scope="session")
def results_dir():
    """Create and return results directory for this test session."""
    results_root = os.path.join(os.path.dirname(__file__), 'test_results')
    os.makedirs(results_root, exist_ok=True)
    # Cleanup old runs using helper
    cleanup_old_runs(results_root, RETAIN_COUNT)

    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    results_dir = os.path.join(results_root, f'test_run{timestamp}')
    os.makedirs(results_dir, exist_ok=True)
    return results_dir

def run_perimeter_test(results_dir, orig_file, render_file, params):
    """Common method to run perimeter layer tests with given file names and parameters.
    Returns diffs for the calling test to handle."""
    orig_path = os.path.join(os.path.dirname(__file__), orig_file)
    render_path = os.path.join(os.path.dirname(__file__), render_file)

    orig_cleaned = clean_gcode_file(orig_path)
    render_cleaned = clean_gcode_file(render_path, render_jinja=True, params=params)

    # Save cleaned files using helper
    save_cleaned_files(results_dir, render_path, render_cleaned, orig_path,
                      orig_cleaned)

            # Generate HTML diff for easier viewing
    html_diff = diff_with_html(
        orig_cleaned,
        render_cleaned,
        os.path.basename(orig_path),
        os.path.basename(render_path)
    )
    
    # Count actual differences (lines that start with + or -)
    diff_count = sum(1 for line in html_diff.split('\n') if line.startswith('<td class="diff_add">') or line.startswith('<td class="diff_sub">'))
    
    return diff_count, html_diff

def test_first_layer_perimeter(results_dir):
    """Test that first layer perimeter G-code matches expected output (140% line width, 0.25mm height)."""
    diff_count, html_diff = run_perimeter_test(results_dir,
                      first_layer_test_data['orig_file'],
                      first_layer_test_data['render_file'],
                      first_layer_test_data['params'])

    # Save HTML diff for easier viewing
    html_diff_path = os.path.join(results_dir, 'first_layer_diff.html')
    with open(html_diff_path, 'w', encoding='utf-8') as htmlf:
        htmlf.write(html_diff)

    # Log results
    log_path = os.path.join(results_dir, 'first_layer_test.log')
    with open(log_path, 'w', encoding='utf-8') as logf:
        logf.write("First Layer Test Results\n")
        logf.write(f"Expected: {first_layer_test_data['orig_file']}\n")
        logf.write(f"Generated: {first_layer_test_data['render_file']}\n")
        logf.write(f"Total differences: {diff_count}\n")
        logf.write(f"HTML diff: {os.path.basename(html_diff_path)}")

    if diff_count > 0:
        print(f"First Layer Test: {diff_count} differences found")
        print(f"See {os.path.relpath(log_path)} for details")
        print(f"HTML diff: {os.path.relpath(html_diff_path)}")

    assert diff_count == 0, f"First layer perimeter test failed: {diff_count} differences found"

def test_other_layers_perimeter(results_dir):
    """Test that subsequent layer perimeter G-code matches expected output (112.5% line width, 0.2mm height)."""
    diff_count, html_diff = run_perimeter_test(results_dir,
                      other_layers_test_data['orig_file'],
                      other_layers_test_data['render_file'],
                      other_layers_test_data['params'])

    # Save HTML diff for easier viewing
    html_diff_path = os.path.join(results_dir, 'other_layers_diff.html')
    with open(html_diff_path, 'w', encoding='utf-8') as htmlf:
        htmlf.write(html_diff)

    # Log results
    log_path = os.path.join(results_dir, 'other_layers_test.log')
    with open(log_path, 'w', encoding='utf-8') as logf:
        logf.write("Other Layers Test Results\n")
        logf.write(f"Expected: {other_layers_test_data['orig_file']}\n")
        logf.write(f"Generated: {other_layers_test_data['render_file']}\n")
        logf.write(f"Total differences: {diff_count}\n")
        logf.write(f"HTML diff: {os.path.basename(html_diff_path)}")

    if diff_count > 0:
        print(f"Other Layers Test: {diff_count} differences found")
        print(f"See {os.path.relpath(log_path)} for details")
        print(f"HTML diff: {os.path.relpath(html_diff_path)}")

    assert diff_count == 0, f"Other layers perimeter test failed: {diff_count} differences found"

if __name__ == '__main__':
    pytest.main([__file__])
