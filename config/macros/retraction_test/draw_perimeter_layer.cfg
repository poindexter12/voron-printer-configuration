[gcode_macro _DRAW_PERIMETER_LAYER]
description: Draw a rectangular perimeter layer with multiple perimeters stepping inward
parameters:
  START_X: Starting X coordinate
  START_Y: Starting Y coordinate
  WIDTH: Total width of the perimeter
  HEIGHT: Total height of the perimeter
  LINE_WIDTH: Line width
  LAYER_HEIGHT: Layer height
  NUM_PERIMETERS: Number of perimeters to draw
  STEP_DISTANCE: Distance to step inward for each perimeter
  PRINT_SPEED: Print speed
  TRAVEL_SPEED: Travel speed
  FILAMENT_DIAMETER: Filament diameter
  EXTRUSION_MULTIPLIER: Extrusion multiplier
gcode:
  {# Set all parameters as local variables with defaults #}
  {% set start_x = params.START_X|float %}
  {% set start_y = params.START_Y|float %}
  {% set width = params.WIDTH|float %}
  {% set height = params.HEIGHT|float %}
  {% set line_width = params.LINE_WIDTH|float %}
  {% set layer_height = params.LAYER_HEIGHT|float %}
  {% set num_perimeters = params.NUM_PERIMETERS|int %}
  {% set step_distance = params.STEP_DISTANCE|float %}
  {% set print_speed = params.PRINT_SPEED|float %}
  {% set travel_speed = params.TRAVEL_SPEED|float %}
  {% set filament_diameter = params.FILAMENT_DIAMETER|float %}
  {% set extrusion_multiplier = params.EXTRUSION_MULTIPLIER|float %}

  {# Calculate extrusion constants once #}
  {% set PI = 3.141592653589793 %}
  {% set line_area = (line_width - layer_height) * layer_height + PI * (layer_height/2)**2 %}
  {% set filament_area = PI * (filament_diameter/2)**2 %}
  {% set extrusion_per_mm = (line_area / filament_area) * extrusion_multiplier %}

  {# Decimal places for rounding (extracted from format strings) #}
  {% set x_decimals = 4 %}
  {% set y_decimals = 4 %}
  {% set extrusion_decimals = 5 %}

  {# Draw multiple perimeters stepping inward #}
  {% for i in range(num_perimeters) %}
    {# Calculate current perimeter dimensions #}
    {% set current_step = i * step_distance %}
    {% set current_x = start_x + current_step %}
    {% set current_y = start_y + current_step %}
    {% set current_width = width - (2 * current_step) %}
    {% set current_height = height - (2 * current_step) %}
    
    {# Calculate extrusion amounts for this perimeter #}
    {% set up_extrusion = extrusion_per_mm * current_height %}
    {% set right_extrusion = extrusion_per_mm * current_width %}
    {% set down_extrusion = extrusion_per_mm * current_height %}
    {% set left_extrusion = extrusion_per_mm * current_width %}
    
    {# Draw perimeter rectangle using JavaScript logic (up, right, down, left) #}
    {# Start at current position, then draw up #}
    {% set draw_y = current_y + current_height %}
    G1 X{{ current_x|round(x_decimals) }} Y{{ draw_y|round(y_decimals) }} E{{ up_extrusion|round(extrusion_decimals) }} F{{ print_speed|int }}

    {# Draw right from current position #}
    {% set draw_x = current_x + current_width %}
    G1 X{{ draw_x|round(x_decimals) }} Y{{ draw_y|round(y_decimals) }} E{{ right_extrusion|round(extrusion_decimals) }} F{{ print_speed|int }}

    {# Draw down from current position #}
    {% set draw_y = current_y %}
    G1 X{{ draw_x|round(x_decimals) }} Y{{ draw_y|round(y_decimals) }} E{{ down_extrusion|round(extrusion_decimals) }} F{{ print_speed|int }}

    {# Draw left from current position #}
    {% set draw_x = current_x %}
    G1 X{{ draw_x|round(x_decimals) }} Y{{ draw_y|round(y_decimals) }} E{{ left_extrusion|round(extrusion_decimals) }} F{{ print_speed|int }}

    {# Step inward for next perimeter (unless this is the last one) #}
    {% if i < num_perimeters - 1 %}
      G0 X{{ (current_x + step_distance)|round(x_decimals) }} Y{{ (current_y + step_distance)|round(y_decimals) }} F{{ travel_speed|int }}
    {% endif %}
  {% endfor %}